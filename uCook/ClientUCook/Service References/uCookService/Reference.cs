//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientUCook.uCookService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="uCookContract", ConfigurationName="uCookService.IRecipes")]
    public interface IRecipes {
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/sendRecipe", ReplyAction="uCookContract/IRecipes/sendRecipeResponse")]
        uCookContract.Recipe sendRecipe(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/sendRecipe", ReplyAction="uCookContract/IRecipes/sendRecipeResponse")]
        System.Threading.Tasks.Task<uCookContract.Recipe> sendRecipeAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/findRecipe", ReplyAction="uCookContract/IRecipes/findRecipeResponse")]
        System.Collections.Generic.List<uCookContract.Recipe> findRecipe(string searchInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/findRecipe", ReplyAction="uCookContract/IRecipes/findRecipeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<uCookContract.Recipe>> findRecipeAsync(string searchInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/addRecipe", ReplyAction="uCookContract/IRecipes/addRecipeResponse")]
        bool addRecipe(uCookContract.Recipe recipe);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/addRecipe", ReplyAction="uCookContract/IRecipes/addRecipeResponse")]
        System.Threading.Tasks.Task<bool> addRecipeAsync(uCookContract.Recipe recipe);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/removeRecipe", ReplyAction="uCookContract/IRecipes/removeRecipeResponse")]
        bool removeRecipe(string naam);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/removeRecipe", ReplyAction="uCookContract/IRecipes/removeRecipeResponse")]
        System.Threading.Tasks.Task<bool> removeRecipeAsync(string naam);
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/getAvailableAppliances", ReplyAction="uCookContract/IRecipes/getAvailableAppliancesResponse")]
        System.Collections.Generic.List<uCookContract.Appliances> getAvailableAppliances();
        
        [System.ServiceModel.OperationContractAttribute(Action="uCookContract/IRecipes/getAvailableAppliances", ReplyAction="uCookContract/IRecipes/getAvailableAppliancesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<uCookContract.Appliances>> getAvailableAppliancesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecipesChannel : ClientUCook.uCookService.IRecipes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecipesClient : System.ServiceModel.ClientBase<ClientUCook.uCookService.IRecipes>, ClientUCook.uCookService.IRecipes {
        
        public RecipesClient() {
        }
        
        public RecipesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecipesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecipesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecipesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public uCookContract.Recipe sendRecipe(string name) {
            return base.Channel.sendRecipe(name);
        }
        
        public System.Threading.Tasks.Task<uCookContract.Recipe> sendRecipeAsync(string name) {
            return base.Channel.sendRecipeAsync(name);
        }
        
        public System.Collections.Generic.List<uCookContract.Recipe> findRecipe(string searchInfo) {
            return base.Channel.findRecipe(searchInfo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<uCookContract.Recipe>> findRecipeAsync(string searchInfo) {
            return base.Channel.findRecipeAsync(searchInfo);
        }
        
        public bool addRecipe(uCookContract.Recipe recipe) {
            return base.Channel.addRecipe(recipe);
        }
        
        public System.Threading.Tasks.Task<bool> addRecipeAsync(uCookContract.Recipe recipe) {
            return base.Channel.addRecipeAsync(recipe);
        }
        
        public bool removeRecipe(string naam) {
            return base.Channel.removeRecipe(naam);
        }
        
        public System.Threading.Tasks.Task<bool> removeRecipeAsync(string naam) {
            return base.Channel.removeRecipeAsync(naam);
        }
        
        public System.Collections.Generic.List<uCookContract.Appliances> getAvailableAppliances() {
            return base.Channel.getAvailableAppliances();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<uCookContract.Appliances>> getAvailableAppliancesAsync() {
            return base.Channel.getAvailableAppliancesAsync();
        }
    }
}
